#pragma once
#include <array>
#include <unordered_map>
#include <cstdint>
#include <vector>
#include <chrono>
#include <iostream>
#include <sstream>
#include <windows.h>
#include <psapi.h>
#include <thread>

namespace Scanner
{

    enum SigType
    {
        Relative,
        Absolute,
        Basic,
        Jmp,
    };

    struct Sig
    {
        const char* name;
        const char* signature;
        const int offset;
        const SigType type;

        constexpr Sig(const char* name, const char* signature, const int offset, const SigType type)
            : name(name), signature(signature), offset(offset), type(type) {
        }
    };

    constexpr std::array<Sig, 6> sigs
    {
        Sig("world", "48 8b 0d ?? ?? ?? ?? 48 81 c1 a8 24 00 00 e8 ?? ?? ?? ?? c1 e8 1f 34 01 48 83 c4 28 c3", 3, SigType::Relative),
        Sig("anim", "48 8b 0d ?? ?? ?? ?? 41 89 ?? ?? ?? ?? ?? 45 89 ?? ?? ?? ?? ?? e8 ?? ?? ?? ?? 48 8b ?? ?? 48 8b f0 4d 8b ?? f3 41 0f 10 ?? ?? 4d 8b ?? ?? 0f 28 f1 48 89 ?? ??", 3, SigType::Relative),
        Sig("GetPlayer", "48 83 ec 28 48 8b 0d ?? ?? ?? ?? 48 85 c9 74 ?? e8 ?? ?? ?? ?? 48 8b c8 48 83 c4 28 e9 ?? ?? ?? ??", 0, SigType::Basic),
        Sig("GetScreenPos", "48 89 5c ?? ?? 48 89 74 ?? ?? 57 48 83 ec 40 48 8b f9 0f 29 74 ?? ?? 48 8b 0d ?? ?? ?? ?? 49 8b d8 0f 29 7c ?? ?? 48 8b f2 48 8b ?? ff ?? ?? ?? ?? ?? 48 8b 0d ?? ?? ?? ?? 66 0f 6e f8 48 8b ?? 0f 5b ff ff ?? ?? ?? ?? ??", 0, SigType::Basic),
        Sig("GetBonePos", "48 89 5c ?? ?? 57 48 83 ec 60 48 8b ?? 49 8b f8 4c 8d ?? ?? ?? 0f 29 74 ?? ?? 48 8b d9 ff ?? ?? ?? ?? ?? 48 8b ?? 48 8b cb ff ?? ?? f3 0f 10 74 ?? ?? f3 0f 10 64 ?? ?? 0f 28 ee f3 0f 10 5c ?? ?? 0f 28 d6 f3 0f 59 ?? ?? 0f 28 c4 48 8b 5c ?? ?? f3 0f 59 ?? ?? 0f 28 cb f3 0f 59 ??", 0, SigType::Basic),
        Sig("GetBoneIndexByName", "e8 ?? ?? ?? ?? 8b e8 44 8b c5 48 8b d7 49 8b ce e8 ?? ?? ?? ?? 4c 8b 7c ?? ?? 48 8b f8 4c 8b 74 ?? ?? 48 8b 74 ?? ?? 4c 8b ?? 48 8b 6c ?? ?? 4d 85 c0 0f 84 ?? ?? ?? ??", 1, SigType::Jmp)
    };

    extern std::unordered_map<std::string, DWORD_PTR> cached_sigs;

    template <typename T>
    T get(const char* name) {
        return reinterpret_cast<T>(cached_sigs.find(name)->second);
    }

    void cache();
}
